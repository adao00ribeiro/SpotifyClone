@inject ISpotifyService SpotifyService
@inject IManagerSpotifyLocalStorageService SpotifylocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider provider;
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <!-- Conteúdo para exibir quando o usuário não tem permissão -->
                    <p role="alert">Você não tem permissão para acessar esta página.</p>
                    <RedirectToLogin></RedirectToLogin>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@code {
    private bool usuarioCriado;
    public void naoAutenticado()
    {
        SpotifylocalStorage.RemoveUserSession();
        NavigationManager.NavigateTo("/login");
    }
    private async Task OnNavigateAsync(NavigationContext args)
    {

        if (args.Path != "login")
        {
            usuarioCriado = await SpotifyService.InitilizeUser();

            if (!usuarioCriado)
            {
                naoAutenticado();
            }
            else
            {
                var usersession = await SpotifylocalStorage.GetUserSession();
                await (provider as CustomAuthenticationStateProvider).UpdateAuthenticationState(usersession);
            }
        }

    }
}
